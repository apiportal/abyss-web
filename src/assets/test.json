{
  "info": {
    "title": "44444444444",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
      "name": "Apache 2.0"
    },
    "version": "1.0.0",
    "description": "This is a sample Petstore server.  You can find\nout more about Swagger at\n[http://swagger.io](http://swagger.io) or on\n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n",
    "termsOfService": "http://swagger.io/terms/"
  },
  "components": {
    "schemas": {
      "Pet": {
        "xml": {
          "name": "Pet"
        },
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "tags": {
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "type": "string",
            "description": "pet status in the store"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "User": {
        "xml": {
          "name": "User"
        },
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "required": true,
        "description": "Pet object that needs to be added to the store"
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "required": true,
        "description": "List of user object"
      }
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey"
      },
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account"
            },
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog"
          }
        }
      }
    },
    "callbacks": {
      "onData": {
        "{$request.query.callbackUrl}/data": {
          "post": {
            "requestBody": {
              "description": "subscription payload",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "userData": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "202": {
                "description": "Your server implementation should return this HTTP status code\nif the data was received successfully\n"
              },
              "204": {
                "description": "Your server should return this HTTP status code if no longer interested\nin further updates\n"
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "url": "http://swagger.io",
        "description": "Find out more"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "url": "http://swagger.io",
        "description": "Find out more about our store"
      }
    }
  ],
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/monasdyas4/petstore3/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "paths": {
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "security": [
          {
            "api_key": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of pet to return"
          }
        ],
        "description": "Returns a single pet",
        "operationId": "getPetById"
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "ID of pet that needs to be updated"
          }
        ],
        "operationId": "updatePetWithForm",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the pet"
                  },
                  "status": {
                    "type": "string",
                    "description": "Updated status of the pet"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "path",
            "name": "petId",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "required": true,
            "description": "Pet id to delete"
          }
        ],
        "operationId": "deletePet"
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The name that needs to be fetched. Use user1 for testing."
          }
        ],
        "operationId": "getUserByName"
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "name that need to be updated"
          }
        ],
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true,
          "description": "Updated user object"
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The name that needs to be deleted"
          }
        ],
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser"
      }
    }
  },
  "externalDocs": {
    "url": "http://swagger.io",
    "description": "Find out more about Swagger"
  }
}